{
	"info": {
		"_postman_id": "d92fbc67-7986-4f45-b966-3bb75ce12fff",
		"name": "AUTH APIs",
		"description": "This collection consists of RESTful APIs that are secured via authorization. Below are the auth types used:\n\n1.  **BASIC AUTH**\n2.  **BEARER TOKEN AUTH**\n3.  **DIGEST AUTH + QOP**\n4.  **DIGEST AUTH + ALGORITHM**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POSITIVE TC",
			"item": [
				{
					"name": "BASIC AUTH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// java scripts - chai js library -- similar to english\r",
									"// Tests are executed only after receiving server response\r",
									"\r",
									"pm.test(\"Verify if the response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains mandatory strings\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"authenticated\");\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "user",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/basic-auth/user/passwd",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"basic-auth",
								"user",
								"passwd"
							]
						},
						"description": "This is a REST API that uses Basic Auth to get server response"
					},
					"response": []
				},
				{
					"name": "BEARER TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// java scripts - chai js library -- similar to english\r",
									"// Tests are executed only after receiving server response\r",
									"\r",
									"pm.test(\"Verify if the response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains mandatory strings\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"authenticated\");\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "Bearer 12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/bearer",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"bearer"
							]
						},
						"description": "This is a REST API that uses Bearer Token Auth to get server response"
					},
					"response": []
				},
				{
					"name": "DIGEST AUTH-QOP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// java scripts - chai js library -- similar to english\r",
									"// Tests are executed only after receiving server response\r",
									"\r",
									"pm.test.skip(\"Verify if the response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains mandatory strings\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"authenticated\");\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Cookies are present\", () => {\r",
									"    pm.expect(pm.cookies.has('stale_after')).to.be.true;\r",
									"    pm.expect(pm.cookies.has('fake')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Cookie values are correct\", () => {\r",
									"    pm.expect(pm.cookies.get('fake')).to.eql(\"fake_value\");\r",
									"    pm.expect(pm.cookies.get('stale_after')).to.eql(\"never\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "qop",
									"value": "auth",
									"type": "string"
								},
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"digest-auth",
								"auth",
								"user",
								"passwd"
							]
						},
						"description": "This is a REST API that uses Digest Auth + QOP to get server response"
					},
					"response": []
				},
				{
					"name": "DIGEST AUTH - QOP + ALGORITHM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// java scripts - chai js library -- similar to english\r",
									"// Tests are executed only after receiving server response\r",
									"\r",
									"pm.test(\"Verify if the response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains mandatory strings\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"authenticated\");\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"    pm.expect(pm.response.text()).to.include(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "qop",
									"value": "auth-int",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								},
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "user",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/digest-auth/auth-int/user/passwd/MD5",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"digest-auth",
								"auth-int",
								"user",
								"passwd",
								"MD5"
							]
						},
						"description": "This is a REST API that uses Digest Auth with QOP & ALGORITHM to get server response"
					},
					"response": []
				}
			],
			"description": "This folder consists of all positive test cases.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Verify if the response is not 4xx and 5xx errors\", function () {",
							"    pm.response.to.not.be.error;",
							"});",
							"",
							"pm.test(\"Verify if the response is success\", function () {",
							"    pm.response.to.be.success;",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "FUZZ TEST",
			"item": [
				{
					"name": "BASIC AUTH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{$randomUserName}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{$randomPassword}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/basic-auth/user/passwd",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"basic-auth",
								"user",
								"passwd"
							]
						},
						"description": "This is a REST API that uses Basic Auth to get server response"
					},
					"response": []
				},
				{
					"name": "BEARER TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{$randomWord}} {{$randomInt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/bearer",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"bearer"
							]
						},
						"description": "This is a REST API that uses Bearer Token Auth to get server response"
					},
					"response": []
				},
				{
					"name": "DIGEST AUTH-QOP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "qop",
									"value": "{{$randomWord}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{$randomPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"digest-auth",
								"auth",
								"user",
								"passwd"
							]
						},
						"description": "This is a REST API that uses Digest Auth + QOP to get server response"
					},
					"response": []
				}
			],
			"description": "This folder consists of all positive test cases."
		},
		{
			"name": "NEGATIVE TC",
			"item": [
				{
					"name": "NO AUTH",
					"item": [
						{
							"name": "BASIC AUTH-NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/basic-auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"basic-auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with no auth"
							},
							"response": []
						},
						{
							"name": "BEARER TOKEN-NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/bearer",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"bearer"
									]
								},
								"description": "This is a REST API tested with no auth"
							},
							"response": []
						},
						{
							"name": "DIGEST AUTH-QOP-NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"digest-auth",
										"auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with no auth"
							},
							"response": []
						},
						{
							"name": "DIGEST AUTH - QOP + ALGORITHM-NO AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/digest-auth/auth-int/user/passwd/MD5",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"digest-auth",
										"auth-int",
										"user",
										"passwd",
										"MD5"
									]
								},
								"description": "This is a REST API tested with no auth"
							},
							"response": []
						}
					],
					"description": "This folder consists of test cases with NO AUTH"
				},
				{
					"name": "AUTH SELECTED BUT MISSING CREDENTIALS",
					"item": [
						{
							"name": "BASIC AUTH-MISSING CREDENTIALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/basic-auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"basic-auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with auth selected but missing credentials"
							},
							"response": []
						},
						{
							"name": "BEARER TOKEN-MISSING CREDENTIALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/bearer",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"bearer"
									]
								},
								"description": "This is a REST API tested with auth selected but missing credentials"
							},
							"response": []
						},
						{
							"name": "DIGEST AUTH-QOP-MISSING CREDENTIALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if the response message is UNAUTHORIZED\", function () {\r",
											"    pm.response.to.have.status(\"UNAUTHORIZED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "qop",
											"value": "",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"digest-auth",
										"auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with auth selected but missing credentials"
							},
							"response": []
						}
					],
					"description": "This folder consists of test cases with auth selected but missing credentials."
				},
				{
					"name": "INVALID CREDENTIALS",
					"item": [
						{
							"name": "BASIC AUTH-INVALID UN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "mayur",
											"type": "string"
										},
										{
											"key": "password",
											"value": "passwd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/basic-auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"basic-auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with auth selected but invalid credentials"
							},
							"response": []
						},
						{
							"name": "BEARER TOKEN-INVALID TOKEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Sravanthi 12345",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/bearer",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"bearer"
									]
								},
								"description": "This is a REST API tested with auth selected but invalid credentials"
							},
							"response": []
						},
						{
							"name": "DIGEST AUTH-QOP-INVALID QOP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "qop",
											"value": "mayur",
											"type": "string"
										},
										{
											"key": "password",
											"value": "passwd",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"digest-auth",
										"auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with auth selected but invalid credentials"
							},
							"response": []
						},
						{
							"name": "DIGEST AUTH-QOP-INVALID UN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "username",
											"value": "Vineet",
											"type": "string"
										},
										{
											"key": "qop",
											"value": "auth",
											"type": "string"
										},
										{
											"key": "password",
											"value": "passwd",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"digest-auth",
										"auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with auth selected but invalid credentials"
							},
							"response": []
						}
					],
					"description": "This folder consists of test cases with invalid credentials."
				},
				{
					"name": "INVALID AUTH SELECTED",
					"item": [
						{
							"name": "BASIC AUTH-INVALID AUTH TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Bearer 12345",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/basic-auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"basic-auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with invalid auth type selected"
							},
							"response": []
						},
						{
							"name": "BEARER TOKEN-INVALID AUTH TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "digest",
									"digest": [
										{
											"key": "username",
											"value": "user",
											"type": "string"
										},
										{
											"key": "qop",
											"value": "auth",
											"type": "string"
										},
										{
											"key": "password",
											"value": "passwd",
											"type": "string"
										},
										{
											"key": "algorithm",
											"value": "MD5",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/bearer",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"bearer"
									]
								},
								"description": "This is a REST API tested with invalid auth type selected"
							},
							"response": []
						},
						{
							"name": "DIGEST AUTH-QOP-INVALID AUTH TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user",
											"type": "string"
										},
										{
											"key": "password",
											"value": "passwd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://httpbin.org/digest-auth/auth/user/passwd",
									"protocol": "https",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"digest-auth",
										"auth",
										"user",
										"passwd"
									]
								},
								"description": "This is a REST API tested with invalid auth type selected"
							},
							"response": []
						}
					],
					"description": "This folder consists of test cases with invalid auth type selected."
				}
			],
			"description": "This folder consists of negative test cases.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Verify if the response is client side error\", function () {",
							"    pm.response.to.be.clientError ;",
							"});"
						]
					}
				}
			]
		}
	]
}